// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Select > should accept a grouped object as \`options\` and create option groups 1`] = `
<select
  class="dusk-select"
>
  <optgroup
    label="Group one"
  >
    <option
      value="1"
    >
      one
       
    </option>
    <option
      value="2"
    >
      two
       
    </option>
    <option
      disabled=""
      value="3"
    >
      three
       
    </option>
    
  </optgroup>
  <optgroup
    label="Group two"
  >
    <option
      value="4"
    >
      four
       
    </option>
    <option
      value="5"
    >
      five
       
    </option>
    
  </optgroup>
  
</select>
`;

exports[`Select > should accept an array of objects as options 1`] = `
<select
  class="dusk-select"
>
  <option
    value="1"
  >
    one
     
  </option>
  <option
    value="2"
  >
    two
     
  </option>
  <option
    disabled=""
    value="3"
  >
    three
     
  </option>
  <option
    value="4"
  >
    four
     
  </option>
  
</select>
`;

exports[`Select > should accept an array of string as values of a grouped object 1`] = `
<select
  class="dusk-select"
>
  <optgroup
    label="Group one"
  >
    <option
      value="one"
    >
      one
       
    </option>
    <option
      value="two"
    >
      two
       
    </option>
    <option
      value="three"
    >
      three
       
    </option>
    <option
      value="four"
    >
      four
       
    </option>
    
  </optgroup>
  <optgroup
    label="Group two"
  >
    <option
      value="five"
    >
      five
       
    </option>
    <option
      value="six"
    >
      six
       
    </option>
    <option
      value="seven"
    >
      seven
       
    </option>
    
  </optgroup>
  
</select>
`;

exports[`Select > should accept an array of strings as \`options\` and use each string as both label and value 1`] = `
<select
  class="dusk-select"
>
  <option
    value="one"
  >
    one
     
  </option>
  <option
    value="two"
  >
    two
     
  </option>
  <option
    value="three"
  >
    three
     
  </option>
  <option
    value="four"
  >
    four
     
  </option>
  
</select>
`;

exports[`Select > should accept an empty string as label and use it instead of falling back to the value 1`] = `
<select
  class="dusk-select"
>
  <option
    value="1"
  >
    one
     
  </option>
  <option
    value="2"
  >
    two
     
  </option>
  <option
    disabled=""
    value="3"
  >
    three
     
  </option>
  <option
    value="4"
  >
    four
     
  </option>
  <option
    value="5"
  >
    
     
  </option>
  
</select>
`;

exports[`Select > should pass additional class names and attributes to the rendered element 1`] = `
<select
  class="dusk-select foo bar"
  id="some-id"
>
  <option
    value="one"
  >
    one
     
  </option>
  <option
    value="two"
  >
    two
     
  </option>
  <option
    value="three"
  >
    three
     
  </option>
  <option
    value="four"
  >
    four
     
  </option>
  
</select>
`;

exports[`Select > should render the Select component 1`] = `
<select
  class="dusk-select"
>
  <option
    value="one"
  >
    one
     
  </option>
  <option
    value="two"
  >
    two
     
  </option>
  <option
    value="three"
  >
    three
     
  </option>
  <option
    value="four"
  >
    four
     
  </option>
  
</select>
`;

exports[`Select > should use the value as label if an object is missing it 1`] = `
<select
  class="dusk-select"
>
  <option
    value="1"
  >
    one
     
  </option>
  <option
    value="2"
  >
    two
     
  </option>
  <option
    disabled=""
    value="3"
  >
    three
     
  </option>
  <option
    value="4"
  >
    four
     
  </option>
  <option
    value="5"
  >
    5
     
  </option>
  
</select>
`;
