on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

name: Rusk CI

jobs:
  # JOB to run change detection
  changes:
    runs-on: core
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      run-ci: ${{ steps.filter.outputs.run-ci }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            run-ci:
              - '!(web-wallet/**/*|.github/workflows/webwallet_ci.yml)'
              - '!(explorer/**/*|.github/workflows/explorer_ci.yml)'
              - '!(rusk-wallet/**/*|.github/workflows/ruskwallet_ci.yml)'
          predicate-quantifier: "every"
  analyze:
    needs: changes
    if: needs.changes.outputs.run-ci == 'true'

    name: Dusk Analyzer
    runs-on: core
    steps:
      - uses: actions/checkout@v4
      - uses: dsherret/rust-toolchain-file@v1
      - run: cargo install --git https://github.com/dusk-network/cargo-dusk-analyzer
      - run: cargo dusk-analyzer

  test_nightly:
    needs: changes
    if: needs.changes.outputs.run-ci == 'true' && (github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch')
    name: Nightly tests
    runs-on: core
    steps:
      - uses: actions/checkout@v4
      - uses: dsherret/rust-toolchain-file@v1
      - run: >
          RUSK_PROFILE_PATH="/var/opt/build-cache"
          RUSK_KEEP_KEYS="1"
          RUSK_BUILD_STATE="1"
          RUSK_FORCE_STATE="1"
          make test
      - name: "Clippy check release"
        env:
          RUSK_PROFILE_PATH: "/var/opt/build-cache"
        run: make clippy
      - name: "Upload Rusk Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: rusk-artifact
          path: ./target/release/rusk
          retention-days: 5
  fmt:
    needs: changes
    if: needs.changes.outputs.run-ci == 'true'

    name: Rustfmt
    runs-on: core
    steps:
      - uses: actions/checkout@v4
      - uses: dsherret/rust-toolchain-file@v1
      - run: cargo fmt --all -- --check
  copy_to_host:
    needs: test_nightly
    runs-on: core
    if: needs.test_nightly.result == 'success' && github.base_ref == 'master'
    continue-on-error: true
    steps:
      - name: "Download Rusk Artifact"
        uses: actions/download-artifact@v3
        with:
          name: rusk-artifact
      - name: "Copy Rusk to host"
        run: |
          mkdir -p /var/opt/rusk-artifacts
          cp ./target/release/rusk /var/opt/rusk-artifacts
